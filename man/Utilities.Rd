% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{Utilities}
\alias{Utilities}
\alias{now}
\alias{bquote.arg}
\alias{check.types}
\alias{quantize}
\title{Utilities
Useful tools for programming.}
\usage{
now()

bquote.arg(x)

check.types(...)

quantize(x, init, step, bias = c("round", "floor", "ceiling"))
}
\arguments{
\item{x}{a vector of values}

\item{...}{named arguments, where the name of the argument is a variable class,
and the argument itself is the value to be checked for its type.
\code{function} cannot be provided as argument name,
so the shorthand \code{fun} must be used.}

\item{init}{an initial value}

\item{step}{steps over which to be quantized}

\item{bias}{when quantizing, should the value be rounded up or down?}
}
\value{
\code{quantize()} returns a quantized numeric vector.
}
\description{
Utilities
Useful tools for programming.
}
\details{
\code{now()} returns the current numeric Linux timestamp.

\code{bquote.arg()} is to be used inside functions.
It returns the content of the argument as a call, but evaluates parts of the argument that were wrapped inside \code{.()}, akin to \code{bquote()}.

\code{check.types()} checks the class of its arguments,
and errors if an argument does not match the class that was provided
as argument name.

\code{quantize()} quantizes a vector.
}
\examples{
now()
testfunction<-function(x){ bquote.arg(x) }
testfunction(a + b)
# a + b
testfunction(a + b + .(5+5))
# a + b + 10
check.types(numeric=3,character="a",fun=read.csv)
# TRUE
\dontrun{
check.types(numeric="3")
}
# Error in check.types(numeric = "3") :
# Argument 1 with value 3 should be of type numeric, but is of type character
quantize(1:20,0.5,2,"ceiling")
# 2.5  2.5  4.5  4.5  6.5  6.5  8.5  8.5 10.5 10.5 12.5 12.5 14.5 14.5 16.5 16.5 18.5 18.5 20.5 20.5
}

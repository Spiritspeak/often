% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scheduler.R
\name{tableEnv}
\alias{tableEnv}
\alias{scheduler}
\alias{addJob}
\alias{delJob}
\alias{jobList}
\alias{setLoop}
\alias{startLoop}
\alias{stopLoop}
\title{Schedule tasks}
\usage{
tableEnv()

addJob(code, runtime, loopid = "main")

delJob(jobid, jobnum, status, delete = TRUE)

jobList()

setLoop(
  loopid = "main",
  rate = 1,
  tolerance = 60,
  on.error = "continue",
  on.miss = "continue",
  on.complete = "terminate"
)

startLoop(loopid = "main")

stopLoop(loopid = "main")
}
\arguments{
\item{code}{Code of any length. It will remain unevaluated until the job is run -
save for the parts of the code wrapped in \code{.()} brackets.}

\item{runtime}{a future timestamp (use in conjunction with \code{now()} for convenience)}

\item{loopid}{A handle to an event loop.}

\item{jobid}{one or multiple jobids, which serve as identifiers for the scheduled jobs, to be deleted}

\item{jobnum}{Number of job(s) to be deleted}

\item{status}{status of job(s) to be deleted}

\item{delete}{Logical. If true, deletes jobs from schedule.
If false, sets their status to 'disabled' instead. Default is TRUE.}

\item{rate}{numeric, in seconds. How often should the loop check for a new task to be run?}

\item{tolerance}{numeric, in seconds; jobs that were scheduled this many seconds
in the past will still be run. Jobs beyond this point will be considered missed.}

\item{on.error}{character; what is to be done when a job results in an error?
Defaults to "continue".}

\item{on.miss}{character; what is to be done when a job is missed?
Defaults to "continue".}

\item{on.complete}{character; what is to be done to the loop when
there are no more jobs to be run? Defaults to "terminate".}
}
\value{


\code{delJob()} returns TRUE if successful, FALSE if failed.
}
\description{
The following functions allow users to schedule functions in a virtual agenda,
and initiate a loop that periodically checks whether any particular function is due.
}
\details{
A job can be any line(s) of code, and it will be run at the designated timstamp if the associated loop is running.

\code{startLoop()} starts a loop.

\code{stopLoop()} stops a loop.
}
\section{Functions}{
\itemize{
\item \code{tableEnv}: Returns the environment containing the
looptable and the jobtable, allowing for direct modification
rather than through helper functions.

\item \code{addJob}: Add a job to the schedule.

\item \code{delJob}: Delete a job. Use in conjunction with \code{jobList()}.
Deletes job(s) based on their number in the job queue/schedule, their IDs, or their status.

\item \code{jobList}: Returns a data.frame containing all jobs, finished and unfinished.

\item \code{setLoop}: Configure an existing loop or create a new loop
with custom settings. When started using \code{startLoop()}, this loop
will periodically check for jobs to execute.
When an unknown \code{loopid} is given, a new loop is created.

\item \code{startLoop}: Start a loop with given loopid.

\item \code{stopLoop}: Stop a running loop.
}}

\examples{
addJob(code=print("Hello World"),runtime=now()+5)
delme<-addJob(code=print("Goodbye World"),runtime=now()+6)
delJob(jobid=delme)
addJob(code=stopLoop(),runtime=now()+7)
setLoop(rate=0.5)
print(jobList())
startLoop()


}

#library(later)
#library(magrittr)

#.jobtable "anatomy":
#  loopid = name of the loop that will call the function
#  jobid  = schedule time + random numbers, serves as identifier
#  status = ready, running, completed, missed, errored?
#  func   = the call to run
#  st     = scheduled time -> when it was scheduled
#  rt     = run time -> when the function should be run

#' @import later
#' @import magrittr
#' @import methods
#' @importFrom methods is new
#' @importFrom stats setNames

pkg.env<-NULL
.onLoad <- function(libname,pkgname){
  pkg.env<-globalenv()
  # This table contains all jobs
  pkg.env$jobtable <- data.frame(loopid=NA,jobid=NA,status=NA,func=NA,st=NA,rt=NA)[F,]
  # And this table contains all loops
  pkg.env$looptable<-data.frame(loopid=NA,stateid=randomStateId(),status=NA,rate=1,tolerance=0,on.error=NA,
                                 on.miss=NA,on.complete=NA,starttime=NA)[F,]
  assign("pkg.env",value=pkg.env,envir=parent.frame())
  utils::globalVariables("pkg.env","often")
}

#' @title h
#' @description h!
#' @export
#' @example h()
h<-function(){
  stop(length(pkg.env))
  print(pkg.env$jobtable)
}


#' @name scheduler
#' @title Schedule tasks
#' @description The following functions allow users to schedule functions in a virtual agenda,
#' and initiate a loop that periodically checks whether any particular function is due.
#'
#' @param func a function
#' @param runtime a future timestamp (use \code{now()} for convenience)
#' @param loopid A handle to an event loop; optional.
#'
#' @details \code{addJob()} adds a job to the schedule of the designated \code{loopid}.
#' A job can be any line(s) of code, and it will be run at the designated timstamp if the associated loop is running.
#' @return \code{addJob()} returns the timestamp of when it was created, which can be used to delete the job.
#' @export
#'
#' @examples
#' addJob(func=print("Hello World"),runtime=now()+5)
#' startLoop()
addJob<-function(func,runtime,loopid="main"){
  st<-now()
  temptable<-do.call(data.frame,setNames(as.list(rep(NA,ncol(pkg.env$jobtable))),colnames(pkg.env$jobtable)))
  temptable[1,]$func<-deparse(bquote.arg(func))
  temptable[1,]$jobid<-randomStateId()
  temptable[1,]$st<-st
  temptable[1,]$rt<-runtime
  temptable[1,]$loopid<-loopid
  temptable[1,]$status<-"ready"
  pkg.env$jobtable<-rbind(pkg.env$jobtable,temptable)
  return(st)
}

#' @describeIn scheduler
#'
#' @param jobid one or multiple jobids, which serve as identifiers for the scheduled jobs, to be deleted
#' @param jobnum Number of job(s) to be deleted
#' @param status status of job(s) to be deleted
#' @param delete Logical. If true, deletes jobs from schedule.
#' If false, sets their status to 'disabled' instead. Default is TRUE.
#'
#' @return \code{delJob()} returns TRUE if successful, FALSE if failed.
#' @details \code{delJob()} deletes job(s) based on their number in the job queue/schedule, their IDs, or their status.
#' @export
#'
#' @examples
delJob<-function(jobid,jobnum,status,delete=TRUE){
  if(missing(jobnum)){
    if(missing(jobid)){
      if(missing(status)){
        stop("No arguments provided!")
        return(F)
      }else{
        doable<- jobnum <= nrow(pkg.env$jobtable)
        if(doable){
          if(delete){
            pkg.env$jobtable<-pkg.env$jobtable[-jobnum,]
          }else{
            pkg.env$jobtable[jobnum,]$status<-"disabled"
          }
        }else{
          stop("Line number exceeds number of jobs.")
        }
        return(doable)
      }
    }else{
      doable<- which(pkg.env$jobtable$jobid==jobid)
      if(length(doable)>0){
        if(delete){
          pkg.env$jobtable<-pkg.env$jobtable[-doable,]
        }else{
          pkg.env$jobtable[doable,]$status<-"disabled"
        }
      }else{
        stop("No jobs with the provided jobid found.")
      }
      return(length(doable)>0)
    }
  }else{
    doable<- which(pkg.env$jobtable$status==status)
    if(length(doable)>0){
      if(delete){
        pkg.env$jobtable<-pkg.env$jobtable[-doable,]
      }else{
        pkg.env$jobtable[doable,]$status<-"disabled"
      }
    }else{
      stop("No jobs with the provided status found.")
    }
    return(length(doable)>0)
  }
}

#' @describeIn scheduler
#'
#' @export
#' @examples
jobList<-function(){
  return(pkg.env$jobtable)
}

#' @describeIn scheduler
#'
#' @param loopid A handle to an event loop.
#' @param rate numeric, in seconds. How often should the loop check for a new task to be run?
#' @param tolerance numeric, in seconds; jobs that were scheduled this many seconds in the past will still be run. Jobs beyond this point will be considered missed.
#' @param on.error character; what is to be done when a job results in an error? Defaults to "continue".
#' @param on.miss character; what is to be done when a job is missed? Defaults to "continue".
#' @param on.complete character; what is to be done to the loop when there are no more jobs to be run? Defaults to "terminate".
#'
#' @details \code{setLoop()} configures the loop which will periodically check for jobs to execute.
#' When an unknown \code{loopid} is given, a new loop is created.
#' @export
#' @examples
setLoop<-function(loopid="main",rate=1,tolerance=60,on.error="continue",on.miss="continue",on.complete="terminate"){
  newtable<-data.frame(loopid=loopid,stateid=randomStateId(),status="inactive",rate=rate,tolerance=tolerance,
                       on.error=on.error,on.miss=on.miss,on.complete=on.complete,starttime=NA)
  if(any(loopid %in% pkg.env$looptable$loopid)){
    newtable$status<-pkg.env$looptable[pkg.env$looptable$loopid==loopid,]$status
    pkg.env$looptable[pkg.env$looptable$loopid==loopid,]<-newtable
  }else{
    pkg.env$looptable<-rbind(pkg.env$looptable,newtable)
  }
}

#' @describeIn scheduler
#'
#' @details \code{startLoop()} starts a loop.
#' @export
#' @examples
startLoop<-function(loopid="main"){
  pkg.env$looptable[pkg.env$looptable$loopid==loopid,]$stateid<-randomStateId()
  pkg.env$looptable[pkg.env$looptable$loopid==loopid,]$starttime<-now()
  pkg.env$looptable[pkg.env$looptable$loopid==loopid,]$status<-"active"
  carryLoop(loopid,pkg.env$looptable[pkg.env$looptable$loopid==loopid,]$stateid)
}

#' @describeIn scheduler
#'
#' @details \code{stopLoop()} stops a loop.
#' @export
#' @examples
stopLoop<-function(loopid="main"){
  pkg.env$looptable[pkg.env$looptable$loopid==loopid,]$stateid<-randomStateId()
}



carryLoop<-function(loopid,stateid){
  #stop if stateid was scrambled or if there are no remaining jobs while the looper was set to terminate when reaching this situation
  if(stateid != pkg.env$looptable[pkg.env$looptable$loopid==loopid,]$stateid){
    pkg.env$looptable[pkg.env$looptable$loopid==loopid,]$status<-"aborted"
    return()
  }
  if(pkg.env$looptable[pkg.env$looptable$loopid==loopid,]$on.complete=="terminate" &
     sum(pkg.env$jobtable$loopid==loopid & pkg.env$jobtable$status=="ready") == 0){
    pkg.env$looptable[pkg.env$looptable$loopid==loopid,]$status<-"completed"
    return()
  }

  #find missed jobs and stop if the loop was set to terminate on this condition
  missed<-  pkg.env$jobtable[pkg.env$jobtable$loopid==loopid,]$status=="ready" &
    pkg.env$jobtable[pkg.env$jobtable$loopid==loopid,]$rt < now() -
    pkg.env$looptable[pkg.env$looptable$loopid==loopid,]$tolerance

  pkg.env$jobtable[pkg.env$jobtable$loopid==loopid,][missed,]$status<-"missed"
  if(sum(missed)>0 & pkg.env$looptable[pkg.env$looptable$loopid==loopid,]$on.miss=="terminate"){
    pkg.env$looptable[pkg.env$looptable$loopid==loopid,]$status<-"missed"
    return()
  }

  #pick most overdue job that has not been missed
  torun<-(pkg.env$jobtable$loopid==loopid & pkg.env$jobtable$status=="ready" &
            pkg.env$jobtable$rt > now() - pkg.env$looptable[pkg.env$looptable$loopid==loopid,]$tolerance)
  runline<-which(torun)[which.min(pkg.env$jobtable[torun,]$rt)]

  #run task
  out<-try(eval(parse(text=runline$func)))

  #log errors and stop if required
  if(!is.null(attr(out,"condition"))){
    pkg.env$jobtable[torun,]$status<-"errored"
    if(pkg.env$looptable[pkg.env$looptable$loopid==loopid,]$on.error=="terminate"){
      pkg.env$looptable[pkg.env$looptable$loopid==loopid,]$status<-"errored"
      return()
    }
  }

  #run next loop phase
  pkg.env$looptable[pkg.env$looptable$loopid==loopid,]$status<-"active"
  delay <- quantize(now() + pkg.env$looptable[pkg.env$looptable$loopid==loopid,]$rate,
                    init=pkg.env$looptable[pkg.env$looptable$loopid==loopid,]$starttime,
                    step=pkg.env$looptable[pkg.env$looptable$loopid==loopid,]$rate,
                    bias="floor") - now()
  later::later(func=~carryLoop(loopid,stateid),delay=delay)
}

randomStateId<-function(){
  Sys.time() %>% as.numeric() %>% as.character() %>% paste0(".",sample(0:99999,1))
}
.onLoad()
